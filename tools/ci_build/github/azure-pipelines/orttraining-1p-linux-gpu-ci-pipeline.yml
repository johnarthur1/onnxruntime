parameters:
  - name: build_flag
    displayName: Build Flag
    type: string
    default: --enable_onnx_tests
  - name: image_tag
    displayName: Image Tag
    type: string
    default: latest

stages:
- stage: Python_Packaging

  variables:
    docker_image_prefix: onnxruntime-training
    linux_gpu_dockerfile: dockerfiles/Dockerfile.training

  jobs:
  - job: Linux_py_GPU_Wheels
    timeoutInMinutes: 0
    workspace:
      clean: all
    pool: Linux-GPU-CUDA10
    #pool: Linux-Multi-GPU-V100
    steps:
      - checkout: self
        clean: true
        submodules: recursive

      - template: templates/set-py-packaging-variables-step.yml

      - task: CmdLine@2
        displayName: Build builder stage of docker file
        inputs:
          script: |
            docker build \
              --pull \
              -t ${{ variables.docker_image_prefix }}-manylinux-gpu-release-stage1 \
              --target builder \
              --build-arg BUILD_FLAG="${{ parameters.build_flag }}" \
              -f ${{ variables.linux_gpu_dockerfile }} .
          workingDirectory: $(Build.SourcesDirectory)

      - task: CmdLine@2
        displayName: Run tests
        inputs:
          script: |
            docker run \
              --gpus all \
              --rm \
              ${{ variables.docker_image_prefix }}-manylinux-gpu-release-stage1 \
              python onnxruntime/tools/ci_build/build.py \
              --build_dir build \
              --config Release \
              --test \
              --enable_onnx_tests
          workingDirectory: $(Build.SourcesDirectory)

      - task: CmdLine@2
        displayName: Build entire docker file
        inputs:
          script: |
            docker build \
              --pull \
              -t ${{ variables.docker_image_prefix }}-manylinux-gpu-release \
              --build-arg BUILD_FLAG="${{ parameters.build_flag }}" \
              -f ${{ variables.linux_gpu_dockerfile }} .
          workingDirectory: $(Build.SourcesDirectory)

      - task: AzureKeyVault@1
        inputs:
          azureSubscription: 'AIInfraBuild'
          KeyVaultName: 'jingywatest'
          SecretsFilter: '*'
          RunAsPreJob: false

      - task: CmdLine@2
        inputs:
          script: |
            echo $(OrtreleasePassword) > password.txt
            cat password.txt | docker login --username ortrelease --password-stdin ortrelease.azurecr.io
            docker tag ${{ variables.docker_image_prefix }}-manylinux-gpu-release ortrelease.azurecr.io/onnxruntime-training:${{ parameters.image_tag }}
            docker push ortrelease.azurecr.io/onnxruntime-training:${{ parameters.image_tag }}

      - template: templates/component-governance-component-detection-steps.yml

      - template: templates/clean-agent-build-directory-step.yml
